<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Max Gonzih]]></title>
  <link href="http://blog.gonzih.me/atom.xml" rel="self"/>
  <link href="http://blog.gonzih.me/"/>
  <updated>2013-08-25T21:27:06+03:00</updated>
  <id>http://blog.gonzih.me/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cheap standing desk]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/25/cheap-standing-desk/"/>
    <updated>2013-08-25T12:16:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/25/cheap-standing-desk</id>
    <content type="html"><![CDATA[<p>I love idea of standing desks.
I feel myself much more productive behind standing desk.
But commercial desks suffer from high price and complicated design.</p>

<p>Solution? Build your own standing desk!</p>

<!--more-->


<p>I started using standing desk by making small stand on top of my ordinary desk, so I can remove it when I&#8217;m to lazy to stand. It was one year ago.
After a while with that solution I decided to build my proper standing desk.
But how and what to use as materials? Plain wood is too heavy, expensive and build will take more time (if you want a nice looking desk).
And then I saw joints and pipes used in furniture.
I took unused small door from my desk, some metal pipes (25mm in diameter) and joints.
And best thing is that height is adjustable.
You can build it with 2 shelfs and make bottom one wider for keyboard and mouse and put display on the top shelf.
Easy to put together and take a part. Nice looking.
Cheap. Total cost of materials was ~35$.
For nice and clean cuts some old pipe cutter is perfect.</p>

<h2>Photos</h2>

<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/1.jpeg" alt="Standing Desk #1" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/2.jpeg" alt="Standing Desk #2" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/3.jpeg" alt="Standing Desk #3" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/standing-desk/4.jpeg" alt="Standing Desk #4" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed/Ping test graphs with Clojure and Raspberry Pi]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi/"/>
    <updated>2013-08-24T14:02:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I&#8217;m often complaining about my ISP quality.
Sometimes pings are high, sometimes download speed goes down.
So I decided to make sure it&#8217;s my ISP fault and not just my opinion based on my hate to them.</p>

<p>How to do so? Let&#8217;s collect data about download speed and pings over time, and show some graphs based on that data.</p>

<!-- more -->


<p>I have unused Raspberry Pi right now, so it will be used to collect data.</p>

<h2>Speedtest data</h2>

<p>For speedtest I will be using python script that uses speedtest.net servers.
Pi is running Pidora right now, so let&#8217;s install script dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum -y install python-argparse python-lxml
</span></code></pre></td></tr></table></div></figure>


<p>Script is hosted on <a href="https://github.com/Janhouse/tespeed">github</a>.
Let&#8217;s get the script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir ~/scripts
</span><span class='line'>wget https://raw.github.com/Janhouse/tespeed/master/tespeed.py -O ~/scripts/speedtest.py
</span></code></pre></td></tr></table></div></figure>


<p>You can test script running it with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>python ~/scripts/speedtest.py
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s wrap python script into additional shell script to store time of data collection in csv.
I&#8217;m not sure if I need time for now, but let&#8217;s keep it anyway.
We will silence stderr from the script and output results as csv.</p>

<figure class='code'><figcaption><span>~/bin/speedtest.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/zsh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;\&quot;$(date -R)\&quot;,$(python ~/scripts/tespeed.py --csv -s)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s put script into crontab to run every 5 minutes, also let&#8217;s redirect stderr to /dev/null in case of Ethernet unavailability or some other issues.</p>

<figure class='code'><figcaption><span>crontab</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*/5 * * * * ~/bin/speedtest.zsh 2&gt;/dev/null &gt;&gt; ~/.speedtest.csv
</span></code></pre></td></tr></table></div></figure>


<h2>Ping data</h2>

<p>For ping data we will be running <code>ping</code> command with 100 packets (<code>ping -c 100</code>) with google dns as target (8.8.8.8) and storing avg value with time to csv file.</p>

<figure class='code'><figcaption><span>~/bin/pingtest.zsh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/zsh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">AVG</span><span class="o">=</span><span class="k">$(</span>ping -c 100 8.8.8.8 | grep rtt | sed -r <span class="s1">&#39;s#.*\=\s.+/(.+)/.+/.+#\1#&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;\&quot;$(date -R)\&quot;,$AVG&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>crontab</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*/5 * * * * ~/bin/pingtest.zsh 2&gt;/dev/null &gt;&gt; ~/.pingtest.csv
</span></code></pre></td></tr></table></div></figure>


<h2>Graphs</h2>

<p>For data visualization let&#8217;s use Clojure with Incanter. Here is clojure code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">incanter-graphs.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">incanter.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">incanter.stats</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">incanter.charts</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clojure-csv.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">to-f</span> <span class="p">[</span><span class="nv">is</span><span class="p">]</span> <span class="p">(</span><span class="nf">Float/parseFloat</span> <span class="nv">is</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-f-col</span> <span class="p">[</span><span class="nv">data</span> <span class="nv">col</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="nv">to-f</span> <span class="p">(</span><span class="nf">sel</span> <span class="nv">data</span> <span class="ss">:cols</span> <span class="nv">col</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">init-chart</span> <span class="p">[</span><span class="nv">data</span> <span class="nv">rng</span> <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">x-label</span> <span class="nv">y-label</span><span class="p">]}]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">line-chart</span> <span class="nv">rng</span> <span class="nv">data</span> <span class="ss">:x-label</span> <span class="nv">x-label</span>
</span><span class='line'>                       <span class="ss">:y-label</span> <span class="nv">y-label</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-to-chart</span> <span class="p">[</span><span class="nv">chart</span> <span class="nv">data</span> <span class="nv">rng</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="p">(</span><span class="nf">add-categories</span> <span class="nv">%1</span> <span class="nv">rng</span> <span class="nv">%2</span><span class="p">)</span> <span class="nv">chart</span> <span class="nv">data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">draw-file</span> <span class="p">[</span><span class="nv">filename</span> <span class="nv">cols</span> <span class="o">&amp;</span> <span class="p">{</span><span class="ss">:as</span> <span class="nv">opts</span><span class="p">}]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">data</span> <span class="p">(</span><span class="nb">slurp </span><span class="nv">filename</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">csv</span> <span class="p">(</span><span class="nf">parse-csv</span> <span class="nv">data</span> <span class="ss">:delimiter</span> <span class="sc">\,</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">rng</span> <span class="p">(</span><span class="nb">range </span><span class="mi">0</span> <span class="p">(</span><span class="nb">count </span><span class="nv">csv</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">data</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nb">partial </span><span class="nv">get-f-col</span> <span class="nv">csv</span><span class="p">)</span> <span class="nv">cols</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">chart</span> <span class="p">(</span><span class="nf">init-chart</span> <span class="p">(</span><span class="nb">first </span><span class="nv">data</span><span class="p">)</span> <span class="nv">rng</span> <span class="nv">opts</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">chart-to-show</span> <span class="p">(</span><span class="nf">add-to-chart</span> <span class="nv">chart</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">data</span><span class="p">)</span> <span class="nv">rng</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">view</span> <span class="nv">chart-to-show</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="nv">speedfile</span> <span class="nv">pingfile</span> <span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">draw-file</span> <span class="nv">speedfile</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">]</span> <span class="ss">:x-label</span> <span class="s">&quot;Time&quot;</span> <span class="ss">:y-label</span> <span class="s">&quot;Speed&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">draw-file</span> <span class="nv">pingfile</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ss">:x-label</span> <span class="s">&quot;Time&quot;</span> <span class="ss">:y-label</span> <span class="s">&quot;Ping time&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s put all launch process to Makefile:</p>

<figure class='code'><figcaption><span>Makefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nf">default</span><span class="o">:</span>
</span><span class='line'>  scp raspberry-pi.local:.speedtest.csv /tmp/
</span><span class='line'>  scp raspberry-pi.local:.pingtest.csv /tmp/
</span><span class='line'><span class="c">  #Remove lines with only time (script failure)</span>
</span><span class='line'>  grep <span class="s2">&quot;[^,]$$&quot;</span> /tmp/.speedtest.csv &gt; /tmp/.speedtest-fixed.csv
</span><span class='line'>  grep <span class="s2">&quot;[^,]$$&quot;</span> /tmp/.pingtest.csv &gt; /tmp/.pingtest-fixed.csv
</span><span class='line'>  lein run /tmp/.speedtest-fixed.csv /tmp/.pingtest-fixed.csv
</span></code></pre></td></tr></table></div></figure>


<p>I adjusted my router, so QoS daemon will give maximum priority to traffic from my Raspberry Pi, so data will be cleaner.
And now we can see some visualization.</p>

<p><img src="https://dl.dropboxusercontent.com/u/4109351/octopress/ping-speed-graphs/speed.png" alt="Speed Graph" />
<img src="https://dl.dropboxusercontent.com/u/4109351/octopress/ping-speed-graphs/ping.png" alt="Ping Graph" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSS/Atom reader in Clojure via IMAP]]></title>
    <link href="http://blog.gonzih.me/blog/2013/06/28/rss-slash-atom-reader-in-clojure-via-imap/"/>
    <updated>2013-06-28T10:15:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/06/28/rss-slash-atom-reader-in-clojure-via-imap</id>
    <content type="html"><![CDATA[<h3>Motivation</h3>

<p>Google Reader was shut down and I started looking for alternatives.
And sadly I did not found anything close to Google Reader experience.
There are plenty good alternatives, but all of them suffer from some kind of background noise (social based features, weird hotkeys, weird ui, unusable mobile clients and etc.).
All I wanted was simple to use news reader.</p>

<!-- more -->


<h3>Idea</h3>

<p>Then I found post in the Racket community about storing your feeds in the IMAP folders using &#8220;APPEND&#8221; command by <a href="http://www.greghendershott.com/2013/05/feeds2gmail.html">Greg Hendershott</a>.
That was it. Simplest possible solution, that I can run on small device or server by cron. I played a little bit with Racket source code and decided to write my own version to do the job.</p>

<h3>Clojure version</h3>

<p>First I implemented my <a href="https://github.com/Gonzih/feeds2imap.rb">prototype in Ruby</a> in few hours. I picked up Ruby because of built-in rss/atom and imap libraries.
I used it for few days and liked it. Simple, reliable solution.
So then I decided to rewrite it in Clojure.
Why Clojure?
Because it&#8217;s pure fun to use.
I decided to use java.mail framework for message storing and folder manipulations, feedparser-clj to fetch and parse rss/atom feeds and hiccup for templating.
I was really pleased with feedparser-clj in comparison with Ruby built-in library.
java.mail framework was not so bad as I was expecting at first.</p>

<h3>How it works?</h3>

<p>Here is project logic:</p>

<ul>
<li>Fetch folders and urls from feeds file.</li>
<li>Fetch and parse RSS/Atom data from urls.</li>
<li>Select only new items using cache file.</li>
<li>Create required imap folders.</li>
<li>Store new items as email messages.</li>
<li>Mark items as read (put md5 hashes in to the clj file with set of old hashes).</li>
</ul>


<p>It&#8217;s running now by cron (every hour) on my BeagleBone (using latest ejre version).</p>

<p>Source code is hosted on github <a href="https://github.com/Gonzih/feeds2imap.clj">here</a>. Take a look at project README for usage.</p>

<h3>More implementations</h3>

<ul>
<li><a href="https://github.com/Gonzih/feeds2imap.rb">My Ruby prototype</a></li>
<li><a href="https://github.com/Gonzih/feeds2imap.clj">My Clojure implementation</a></li>
<li><a href="https://github.com/greghendershott/feeds2gmail">Racket implementation</a></li>
<li><a href="https://github.com/cordawyn/rss2imap">Haskell implementation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast LXC configuration with netctl nat]]></title>
    <link href="http://blog.gonzih.me/blog/2013/04/16/fast-lxc-configuration-on-laptop-with-netctl-nat/"/>
    <updated>2013-04-16T07:42:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/04/16/fast-lxc-configuration-on-laptop-with-netctl-nat</id>
    <content type="html"><![CDATA[<p>So I spend few hours playing with Linux Containers. Pretty interesting stuff. So here is small tutorial on how to create and use container on Arch Linux as host machine.</p>

<!--more-->


<p>Install <code>lxc</code> first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo pacman -S lxc
</span></code></pre></td></tr></table></div></figure>


<p>Next is bridge device for nat. I&#8217;m already migrated to netctl in arch linux so my configuration is for netctl.</p>

<figure class='code'><figcaption><span>/etc/netctl/lxcbridge</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">&quot;LXC Bridge connection&quot;</span>
</span><span class='line'><span class="na">Interface</span><span class="o">=</span><span class="s">lxcbr0</span>
</span><span class='line'><span class="na">Connection</span><span class="o">=</span><span class="s">bridge</span>
</span><span class='line'><span class="na">BindsToInterfaces</span><span class="o">=</span><span class="s">()</span>
</span><span class='line'><span class="na">IP</span><span class="o">=</span><span class="s">static</span>
</span><span class='line'><span class="na">Address</span><span class="o">=</span><span class="s">192.168.100.1/24</span>
</span><span class='line'><span class="na">FwdDelay</span><span class="o">=</span><span class="s">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure you have <code>dnsmasq</code> installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pacman -S dnsmasq
</span></code></pre></td></tr></table></div></figure>


<p>Run interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo netctl start lxcbridge
</span></code></pre></td></tr></table></div></figure>


<p>And enable it for startup</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo netctl <span class="nb">enable </span>lxcbridge
</span></code></pre></td></tr></table></div></figure>


<p>Add iptables rule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo iptables -t nat -A POSTROUTING -o &lt;you-main-ethernet-device-here&gt; -j MASQUERADE
</span></code></pre></td></tr></table></div></figure>


<p>Save iptables (as superuser):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>iptables-save &gt; /etc/iptables/iptables.rules
</span></code></pre></td></tr></table></div></figure>


<p>Enable ip_forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo sysctl net.ipv4.ip_forward<span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>Or to save forwarding persisent add following line:</p>

<figure class='code'><figcaption><span>/etc/sysctl.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>net.ipv4.ip_forward=1
</span></code></pre></td></tr></table></div></figure>


<p>Create new Ubuntu container:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-create -n playtime -t ubuntu
</span></code></pre></td></tr></table></div></figure>


<p>It will create new root filesystem with new configuration. Lets now change conatiner&#8217;s configuration:</p>

<figure class='code'><figcaption><span>/var/lib/lxc/playtime/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">lxc.network.type</span> <span class="o">=</span> <span class="s">veth</span>
</span><span class='line'><span class="na">lxc.network.flags</span> <span class="o">=</span> <span class="s">up</span>
</span><span class='line'><span class="na">lxc.network.link</span> <span class="o">=</span> <span class="s">lxcbr0</span>
</span><span class='line'><span class="na">lxc.network.hwaddr</span> <span class="o">=</span> <span class="s">00:FF:AA:00:00:01</span>
</span><span class='line'><span class="na">lxc.network.ipv4</span> <span class="o">=</span> <span class="s">192.168.100.10/24</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets boot our conatiner. Better use screen or tmux for it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo lxc-start -n playtime
</span></code></pre></td></tr></table></div></figure>


<p>Default user and password for ubuntu template is <code>ubuntu</code>.</p>

<p>Login to container and add default gateway configuration on network up:</p>

<figure class='code'><figcaption><span>/etc/network/if-up.d/routes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'>
</span><span class='line'>route add default gw 192.168.100.1
</span><span class='line'>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>Reboot container with <code>sudo reboot</code> in it.</p>

<p>Now you can ssh to your container <code>ssh ubuntu@192.168.100.10</code>.
You can also run container as daemon <code>sudo lxc-start -n playtime -d</code>.
And you can shutdown container with <code>sudo shutdown</code> inside container.</p>

<p>Thanks for reading. Let me know if I miss something or you know better way of configuring all this stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure on Raspberry Pi: OpenJDK vs Oracle JRE (Java 8 armhf beta) benchmark]]></title>
    <link href="http://blog.gonzih.me/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8/"/>
    <updated>2013-04-14T12:00:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8</id>
    <content type="html"><![CDATA[<p><a href="http://jdk8.java.net/fxarmpreview/">Here</a> you can download latest Java 8 preview for armhf. Lets benchmark it on Raspberry Pi!</p>

<!-- more -->


<p>Pi is running Raspbian.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cat /etc/*-release
</span><span class='line'>PRETTY_NAME="Debian GNU/Linux 7.0 (wheezy)"
</span><span class='line'>NAME="Debian GNU/Linux"
</span><span class='line'>VERSION_ID="7.0"
</span><span class='line'>VERSION="7.0 (wheezy)"</span></code></pre></td></tr></table></div></figure>


<p>Pi CPU is running on 700Mhz.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cpufreq-info | grep 'current CPU'
</span><span class='line'>current CPU frequency is 700 MHz.</span></code></pre></td></tr></table></div></figure>


<p>Clojure version is 1.5.1.</p>

<p>Benchmark code is from <a href="http://nakkaya.com/2011/03/15/clojure-on-the-beagleboard/">nakkaya&#8217;s post</a>, also used for my BeagleBone Clojure/ClojureScript benchmarks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">benchmark.core</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce * </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span><span class="nv">N</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">x</span><span class="p">))))</span>
</span><span class='line'><span class="c1">;                   ^ integerOverflow fix</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sort-seq</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">repeat </span><span class="mi">100000</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">2000000</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">time-it</span> <span class="p">[</span><span class="nv">fn</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">values</span>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">200</span><span class="p">)]</span> <span class="p">(</span><span class="nb">with-out-str </span><span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">fn</span><span class="p">))))</span>
</span><span class='line'>        <span class="nv">doubles</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">Double.</span> <span class="p">(</span><span class="nb">nth </span><span class="p">(</span><span class="nf">.split</span> <span class="nv">%</span> <span class="s">&quot; &quot;</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span> <span class="nv">values</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">apply + </span><span class="nv">doubles</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">doubles</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(factorial 5000) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(fib 20) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(sort-seq) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">sort-seq</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time I was a little bit smarter to run all code with <code>lein trampoline run</code> to eliminate overhead.</p>

<p>Numbers:</p>

<p>OpenJDK:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">&gt; </span><span class="nv">sudo</span> <span class="nv">apt-get</span> <span class="nv">install</span> <span class="nv">openjdk-7-jre-headless</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">java</span> <span class="nv">-version</span>
</span><span class='line'><span class="nv">java</span> <span class="nv">version</span> <span class="s">&quot;1.7.0_07&quot;</span>
</span><span class='line'><span class="nv">OpenJDK</span> <span class="nv">Runtime</span> <span class="nv">Environment</span> <span class="p">(</span><span class="nf">IcedTea7</span> <span class="mf">2.3</span><span class="nv">.2</span><span class="p">)</span> <span class="p">(</span><span class="mi">7</span><span class="nv">u7-2.3.2a-1+rpi1</span><span class="p">)</span>
</span><span class='line'><span class="nv">OpenJDK</span> <span class="nv">Zero</span> <span class="nv">VM</span> <span class="p">(</span><span class="nf">build</span> <span class="mf">22.0</span><span class="nv">-b10</span>, <span class="nv">mixed</span> <span class="nv">mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span>
</span><span class='line'><span class="mf">90.5</span> <span class="mf">15.7</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span> <span class="mf">5956.007845080006</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span> <span class="mf">713.6807171</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span> <span class="mf">9633.873322030007</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oracle JRE:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">&gt; </span><span class="nv">java</span> <span class="nv">-version</span>
</span><span class='line'><span class="nv">java</span> <span class="nv">version</span> <span class="s">&quot;1.8.0-ea&quot;</span>
</span><span class='line'><span class="nv">Java</span><span class="p">(</span><span class="nf">TM</span><span class="p">)</span> <span class="nv">SE</span> <span class="nv">Runtime</span> <span class="nv">Environment</span> <span class="p">(</span><span class="nf">build</span> <span class="mf">1.8</span><span class="nv">.0-ea-b36e</span><span class="p">)</span>
</span><span class='line'><span class="nv">Java</span> <span class="nv">HotSpot</span><span class="p">(</span><span class="nf">TM</span><span class="p">)</span> <span class="nv">Client</span> <span class="nv">VM</span> <span class="p">(</span><span class="nf">build</span> <span class="mf">25.0</span><span class="nv">-b04</span>, <span class="nv">mixed</span> <span class="nv">mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span>
</span><span class='line'><span class="mf">87.9</span> <span class="mf">18.9</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span> <span class="mf">685.5312071299996</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span> <span class="mf">29.505588125000017</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span> <span class="mf">1137.3281607850001</span>
</span></code></pre></td></tr></table></div></figure>


<p>Startup time for &#8220;Hello, World!&#8221;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="o">#</span> <span class="nv">OpenJDK</span>
</span><span class='line'><span class="nb">&gt; time </span><span class="nv">lein</span> <span class="nv">run</span>
</span><span class='line'><span class="nv">Hello</span>, <span class="nv">World!</span>
</span><span class='line'><span class="nv">lein</span> <span class="nv">run</span>  <span class="mf">56.51</span><span class="nv">s</span> <span class="nv">user</span> <span class="mf">1.58</span><span class="nv">s</span> <span class="nv">system</span> <span class="mi">87</span><span class="nv">%</span> <span class="nv">cpu</span> <span class="mi">1</span><span class="ss">:06.16</span> <span class="nv">total</span>
</span><span class='line'><span class="nb">&gt; time </span><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>
</span><span class='line'><span class="nv">Hello</span>, <span class="nv">World!</span>
</span><span class='line'><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>  <span class="mf">57.73</span><span class="nv">s</span> <span class="nv">user</span> <span class="mf">0.96</span><span class="nv">s</span> <span class="nv">system</span> <span class="mi">96</span><span class="nv">%</span> <span class="nv">cpu</span> <span class="mi">1</span><span class="ss">:00.57</span> <span class="nv">total</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="nv">Oracle</span> <span class="nv">JRE</span>
</span><span class='line'><span class="nb">&gt; time </span><span class="nv">lein</span> <span class="nv">run</span>
</span><span class='line'><span class="nv">Hello</span>, <span class="nv">World!</span>
</span><span class='line'><span class="nv">lein</span> <span class="nv">run</span>  <span class="mf">31.47</span><span class="nv">s</span> <span class="nv">user</span> <span class="mf">1.43</span><span class="nv">s</span> <span class="nv">system</span> <span class="mi">95</span><span class="nv">%</span> <span class="nv">cpu</span> <span class="mf">34.298</span> <span class="nv">total</span>
</span><span class='line'><span class="nb">&gt; time </span><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>
</span><span class='line'><span class="nv">Hello</span>, <span class="nv">World!</span>
</span><span class='line'><span class="nv">lein</span> <span class="nv">trampoline</span> <span class="nv">run</span>  <span class="mf">32.11</span><span class="nv">s</span> <span class="nv">user</span> <span class="mf">1.18</span><span class="nv">s</span> <span class="nv">system</span> <span class="mi">94</span><span class="nv">%</span> <span class="nv">cpu</span> <span class="mf">35.070</span> <span class="nv">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks promising for clojure on small arm devices :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building RC Toy with Clojure]]></title>
    <link href="http://blog.gonzih.me/blog/2013/03/19/building-rc-toy-with-clojure/"/>
    <updated>2013-03-19T11:09:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/03/19/building-rc-toy-with-clojure</id>
    <content type="html"><![CDATA[<p>Bored and have free time? Lets build something.
Lets build RC Toy. Hm, and lets use Clojure (because clojure is pure fun to use).</p>

<!-- more -->


<p>First of all we need some parts.</p>

<ul>
<li>Tamiya Universal Plate Set (TAM70157) (better to order 2 pcs)</li>
<li>Tamiya Track and Wheel Set (TAM70100)</li>
<li>Tamiya Twin Motor Gearbox  (TAM70097)</li>
<li>Arduino (I have UNO and Leonardo, UNO was choosen since I don&#8217;t need to make modifications in Firmata code for it (except baudrate))</li>
<li>HBridge IC L293 (L293B was used)</li>
<li>Bluetooth module (you can buy Arduino ready module, I will be using cheapest possible module)</li>
<li>Bluetooth in PC</li>
<li>Wires</li>
<li>Batteries or Accumulator (I have 9v batteries so I will use them)</li>
<li>Gamepad (Logitech Rumble Gemapad F510 was used)</li>
</ul>


<h1>Putting things together</h1>

<h2>Chassis</h2>

<p>First lets build gearbox. You can use it in few different modes of gear ratio. I selected 114.7:1 gear ratio (lucky guess).
Read instructions, take your time. I had 2 9v motors, so since I will be using 9v batteries I decided to replace default motors with 9v ones.</p>

<p>Next assemble tracks. Pretty easy, right? Next is time to put it all together. Since I had only 1 plate I made second one from peace of plexiglass.
I made something like 2 floored chassis. First floor is for motor and wheels (and maybe batteries) and second is for Arduino (and maybe batterries).</p>

<h2>Bluetooth</h2>

<p>We need to do 2 thing with our cheap bluetooth module:</p>

<p>Solder legs to it
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/bluetooth-module-for-Arduino.jpg" alt="Soldered bluetooth module" /></p>

<p>Use voltage divider (bluetooth module is working on 3.3v, Arduino is working on 5v)
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/bluetooth-module-for-Arduino.svg" alt="Voltage devider" /></p>

<h2>Gearbox and HBridge Driver</h2>

<p>To control motors I decided to use HBridge. You can use bunch of transistors if you want, but I&#8217;m afraid it would be messy.
To understand how HBridge works you should read <a href="http://learn.adafruit.com/adafruit-Arduino-lesson-15-dc-motor-reversing/overview">Adafruit post</a>.</p>

<p>HBridge -> Arduino Schematics:
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/arduino-and-hbridge-l293b-rc-toy.svg" alt="Schematics" /></p>

<h2>Final version</h2>

<h3>Photos</h3>

<p><img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-001.jpg" alt="rc-toy-001" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-002.jpg" alt="rc-toy-002" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-003.jpg" alt="rc-toy-003" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-004.jpg" alt="rc-toy-004" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-005.jpg" alt="rc-toy-005" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-006.jpg" alt="rc-toy-006" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-007.jpg" alt="rc-toy-007" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-008.jpg" alt="rc-toy-008" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-009.jpg" alt="rc-toy-009" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-010.jpg" alt="rc-toy-010" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-011.jpg" alt="rc-toy-011" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-012.jpg" alt="rc-toy-012" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-014.jpg" alt="rc-toy-014" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-016.jpg" alt="rc-toy-016" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-017.jpg" alt="rc-toy-017" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-018.jpg" alt="rc-toy-018" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-019.jpg" alt="rc-toy-019" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-020.jpg" alt="rc-toy-020" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-021.jpg" alt="rc-toy-021" /></p>

<h3>Video</h3>

<p><video width='640' height='480' preload='none' controls poster=' https://dl.dropbox.com/u/4109351/octopress/rc-toy/video-1-cover.jpg'><source src='https://dl.dropbox.com/u/4109351/octopress/rc-toy/video-1.flv' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>

<h1>Writing some code</h1>

<h2>Bluetooth as Serial port</h2>

<p>I used blueman on my Arch Laptop. Gui is straightforward and easy to use.</p>

<h2>Gamepad and kernel</h2>

<p>You need to find kernel module for your gamepad. For my gamepad module <code>joydev</code> was required.
After module is loaded you should see new device in <code>/dev/input</code>.</p>

<h2>Clojure code</h2>

<p>I stuck with <a href="http://clojure.org/">Clojure</a> as main language for controlling Arduino. I took <a href="https://github.com/nakkaya/clodiuno">Clodiuno</a> library.
It is Firmata protocol implementation for Clojure. Why Firmata? Because it&#8217;s easy, fast and provides great way to extend your project in future.</p>

<p>So I wrote some code, uploaded Firmata to Arduino. And&#8230; it&#8217;s not working.</p>

<p>After some digging in Firmata and Clodiuno code I wrote 2 pull request to Clodiuno.</p>

<p>First issue was that bluetooth uses 9600 baudrate for communications. Fix? <a href="https://github.com/nakkaya/clodiuno/pull/5">pull.</a></p>

<ul>
<li>Update standart Firmata example code in Arduino IDE. Change baudrate to 9600.</li>
<li>Change Clodiuno baudrate to 9600.</li>
</ul>


<p>Second was that Clodiuno waits for version response from Firmata on startup. It&#8217;s ok for wired UNO since it will be restarted when serial connection is established.
But boards like Leonardo or if you are using bluetooth miss that behavior.</p>

<p>Fix? <a href="https://github.com/nakkaya/clodiuno/pull/6">pull.</a> Manually ask firmware version on Clodiuno initialization.</p>

<p>Most of controller related logic was extracted from awesome library <a href="https://github.com/gavilancomun/jinput-overtone">overtone-jinput</a>.
I just replaced overtone related events handling with my own code based on Clodiuno.</p>

<p>Final version of code is on <a href="https://github.com/Gonzih/clj-arduino-rc-toy">GitHub</a></p>

<p>You can run it with <code>./run.sh</code>.</p>

<h1>Raspberry Pi</h1>

<p>Currently work in progress on moving Clojure code to Rapberry Pi.</p>

<h2>Fixed Issues</h2>

<h3>Native dependencies issue</h3>

<p>Seems like jvm tries to load linux64 native dependencies for Raspberry Pi. Fix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#INFO: Failed to load library: no jinput-linux64 in java.library.path</span>
</span><span class='line'>sudo ln -s /usr/lib/jni/libjinput.so /usr/lib/jni/libjinput-linux64.so<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Gamepad configuration</h3>

<p>Add <code>joydev</code> to <code>/etc/modules</code> to see gamepad in <code>/etc/input</code>.
Also you need to switch gamepad to direct input mode (X -> D switch on the back of gamepad).</p>

<h2>Unfixed Issues</h2>

<h3>Bluetooth as Serial port</h3>

<p>To scan for devices from command line use <code>hcitool scan</code>.</p>

<p>To bind bluetooth to serial port on startup use following code (untested yet):</p>

<figure class='code'><figcaption><span>/etc/bluetooth/rfcomm.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rfcomm0 {
</span><span class='line'>        bind yes;
</span><span class='line'>        device mac-adress-of-bluetooth-on-arduino;
</span><span class='line'>        channel 1;
</span><span class='line'>        comment &quot;Arduino&quot;;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>JInput permissions</h3>

<p>For now I have no idea how to fix that issue. Looks like something is wrong with permissions.</p>

<figure class='code'><figcaption><span>/etc/bluetooth/rfcomm.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Failed to open device (/dev/input/js0): Failed to open device /dev/input/js0
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I cook Ctags in Vim]]></title>
    <link href="http://blog.gonzih.me/blog/2013/03/18/how-i-cook-ctags-in-vim/"/>
    <updated>2013-03-18T20:50:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/03/18/how-i-cook-ctags-in-vim</id>
    <content type="html"><![CDATA[<p>Ctags is great piece of software. And it took me some time to realize how I can use ctags with vim in optimal for me way. My solution is petty simle. I have few vim functions that vim runs when buffer write is done.</p>

<!--more-->


<p>Functions do following:</p>

<ul>
<li>Initialize tags file with symlink to /tmp (tmpfs) with uuid in name if no symlink was found</li>
<li>Touch tags file</li>
<li>If file is empty (wc -l return 0 lines) then populate it with <code>ctags -R</code> command</li>
<li>Remove all lines from tags file related to current file</li>
<li>Update tags file with new content of current file with <code>ctags -a</code></li>
</ul>


<p>Why I use symlinks for tags file?</p>

<ul>
<li>Writes are slow</li>
<li>Writes are bad for my SSD</li>
<li>Memory is blazingly fast</li>
</ul>


<p>Here is my code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; If tags file does not exist initializes it with symlink to tmp with UUID in</span>
</span><span class='line'><span class="c">&quot; filename</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> InitTagsFileWithSymlink<span class="p">(</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> filepath <span class="p">=</span> <span class="k">a</span>:<span class="k">f</span>
</span><span class='line'>  <span class="k">let</span> issymlink <span class="p">=</span> system<span class="p">(</span><span class="s2">&quot;find &#39;&quot;</span> . filepath . <span class="s2">&quot;&#39; -type l | wc -l&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> issymlink <span class="p">==</span> <span class="m">0</span>
</span><span class='line'>    <span class="k">let</span> uuid <span class="p">=</span> system<span class="p">(</span><span class="s1">&#39;uuidgen&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> cmd  <span class="p">=</span> <span class="s1">&#39;ln -s &quot;/tmp/ctags-for-vim-&#39;</span> . uuid . <span class="s1">&#39;&quot; &quot;&#39;</span> . filepath . <span class="s1">&#39;&quot;&#39;</span>
</span><span class='line'>    <span class="k">let</span> cmd  <span class="p">=</span> substitute<span class="p">(</span>cmd<span class="p">,</span> <span class="s1">&#39;\n&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> resp <span class="p">=</span> system<span class="p">(</span>cmd<span class="p">)</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Populates tags file if lines count is equal to 0</span>
</span><span class='line'><span class="c">&quot; with `ctags -R .`</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> PopulateTagsFile<span class="p">(</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> filepath <span class="p">=</span> <span class="k">a</span>:<span class="k">f</span>
</span><span class='line'>  <span class="k">let</span> resp     <span class="p">=</span> system<span class="p">(</span><span class="s1">&#39;touch &quot;&#39;</span> . filepath . <span class="s1">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="nb">lines</span>    <span class="p">=</span> system<span class="p">(</span><span class="s1">&#39;wc -l &quot;&#39;</span> . filepath . <span class="s1">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> linescnt <span class="p">=</span> substitute<span class="p">(</span><span class="nb">lines</span><span class="p">,</span> <span class="s1">&#39;\D&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> linescnt <span class="p">==</span> <span class="m">0</span>
</span><span class='line'>    <span class="k">let</span> cwd  <span class="p">=</span> getcwd<span class="p">()</span>
</span><span class='line'>    <span class="k">let</span> cmd  <span class="p">=</span> <span class="s1">&#39;ctags -Rf &quot;&#39;</span>. filepath . <span class="s1">&#39;&quot; &quot;&#39;</span> . cwd . <span class="s1">&#39;&quot;&#39;</span>
</span><span class='line'>    <span class="k">let</span> resp <span class="p">=</span> system<span class="p">(</span>cmd<span class="p">)</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Remove tags for saved file from tags file</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> DelTagOfFile<span class="p">(</span><span class="k">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> fullpath    <span class="p">=</span> <span class="k">a</span>:<span class="k">file</span>
</span><span class='line'>  <span class="k">let</span> cwd         <span class="p">=</span> getcwd<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> tagfilename <span class="p">=</span> cwd . <span class="s2">&quot;/tags&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">f</span>           <span class="p">=</span> substitute<span class="p">(</span>fullpath<span class="p">,</span> cwd . <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">f</span>           <span class="p">=</span> escape<span class="p">(</span><span class="k">f</span><span class="p">,</span> <span class="s1">&#39;./&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> cmd         <span class="p">=</span> <span class="s1">&#39;sed --follow-symlinks -i &quot;/&#39;</span> . <span class="k">f</span> . <span class="s1">&#39;/d&quot; &quot;&#39;</span> . tagfilename . <span class="s1">&#39;&quot;&#39;</span>
</span><span class='line'>  <span class="k">let</span> resp        <span class="p">=</span> system<span class="p">(</span>cmd<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Init tags file</span>
</span><span class='line'><span class="c">&quot; Populate it</span>
</span><span class='line'><span class="c">&quot; Remove data related to saved file</span>
</span><span class='line'><span class="c">&quot; Append it with data for saved file</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> UpdateTags<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">f</span>           <span class="p">=</span> expand<span class="p">(</span><span class="s2">&quot;%:p&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> cwd         <span class="p">=</span> getcwd<span class="p">()</span>
</span><span class='line'>  <span class="k">let</span> tagfilename <span class="p">=</span> cwd . <span class="s2">&quot;/tags&quot;</span>
</span><span class='line'>  <span class="k">call</span> InitTagsFileWithSymlink<span class="p">(</span>tagfilename<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> PopulateTagsFile<span class="p">(</span>tagfilename<span class="p">)</span>
</span><span class='line'>  <span class="k">call</span> DelTagOfFile<span class="p">(</span><span class="k">f</span><span class="p">)</span>
</span><span class='line'>  <span class="k">let</span> cmd  <span class="p">=</span> <span class="s1">&#39;ctags -a -f &#39;</span> . tagfilename . <span class="s1">&#39; &quot;&#39;</span> . <span class="k">f</span> . <span class="s1">&#39;&quot;&#39;</span>
</span><span class='line'>  <span class="k">let</span> resp <span class="p">=</span> system<span class="p">(</span>cmd<span class="p">)</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'>command UpdateTags <span class="k">call</span> UpdateTags<span class="p">()</span>
</span><span class='line'>autocmd <span class="nb">BufWritePost</span> *.rb<span class="p">,</span>*.<span class="nb">js</span><span class="p">,</span>*.coffee<span class="p">,</span>*.clj <span class="k">call</span> UpdateTags<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blue Midnight Commander color scheme]]></title>
    <link href="http://blog.gonzih.me/blog/2013/02/14/blue-midnight-commander-color-scheme/"/>
    <updated>2013-02-14T21:22:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/02/14/blue-midnight-commander-color-scheme</id>
    <content type="html"><![CDATA[<p>I spend today few hours reading mc documentation about color scheme configuration. Came up with following color scheme. Enjoy :)</p>

<p><a href="https://raw.github.com/Gonzih/dotfiles/a43c06d7cd12f3e1e06f3efe655e082e4dc78012/.config/mc/theme.png"><img src="https://raw.github.com/Gonzih/dotfiles/a43c06d7cd12f3e1e06f3efe655e082e4dc78012/.config/mc/theme.png" alt="Blue Midnight Commander color scheme" /></a></p>

<figure class='code'><figcaption><span>.config/mc/ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Colors]</span>
</span><span class='line'><span class="na">base_color</span><span class="o">=</span><span class="s">lightgray,blue:normal=blue,default:reverse=green,default:gauge=gray,lightgray:selected=white,blue:marked=yellow,default:markselect=yellow,default:directory=brightblue,default:executable=brightgreen,default:link=cyan,default:device=brightmagenta,default:core=red,default:special=lightgray,default:dnormal=lightgray,blue:dfocus=lightgray,black:dhotnormal=yellow,blue:dhotfocus=yellow,black:menunormal=lightgray,blue:menuhot=yellow,blue:menusel=lightgray,black:menuhotsel=yellow,black:menuinactive=lightgray,gray:errors=lightgray,red:errdhotnormal=yellow,red:errdhotfocus=yellow,lightgray:input=lightblue,gray:inputunchanged=blue,gray:inputmark=white,blue:bbarhotkey=white,black:bbarbutton=lightgray,blue:viewbold=lightgray,default:viewunderline=lightblue,default:viewselected=lightgray,grey:helpnormal=lightgray,default:helpitalic=lightblue,default:helpbold=lightgray,default:helplink=green,default:helpslink=lighgreen,defalt:</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more information take look at <a href="http://www.midnight-commander.org/wiki/doc/common/skins">mc wiki</a> and run <code>mc --help-color</code> to see available color variables in your mc version.
Format of color configuration is <code>what=foreground,background:</code>. All configuration shoud be in one line (ofcourse you can write it in multiple lines and then use vim (or other cool editor) magic).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClojureScript on BeagleBone: simple benchmark with Node.js]]></title>
    <link href="http://blog.gonzih.me/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js/"/>
    <updated>2013-01-23T17:16:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>Benchmark is based on my <a href="http://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/">previous experiments</a> with BeagleBone and Clojure. Setup is the same. BeagleBone is running Ubuntu 12.04. Cpu is running on 500 Mhz.
Node version is 0.6.12. ClojureScript is compiled with advanced and simple optimizations.</p>

<!-- more -->


<p><a href="https://github.com/Gonzih/clojurescript-small-benchmark-for-embed">Code</a> is modified to run on top of the JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">benchmark.core</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce * </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">x</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sort-seq</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">repeat </span><span class="mi">100000</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">2000000</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">time-fun</span> <span class="p">[</span><span class="nv">fun</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">start</span>  <span class="p">(</span><span class="nf">.getTime</span> <span class="p">(</span><span class="nf">js/Date.</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">_</span>      <span class="p">(</span><span class="nf">fun</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">end</span>    <span class="p">(</span><span class="nf">.getTime</span> <span class="p">(</span><span class="nf">js/Date.</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">result</span> <span class="p">(</span><span class="nb">- </span><span class="nv">end</span> <span class="nv">start</span><span class="p">)]</span>
</span><span class='line'>    <span class="nv">result</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">time-it</span> <span class="p">[</span><span class="nv">fun</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">values</span>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">200</span><span class="p">)]</span> <span class="p">(</span><span class="nf">time-fun</span> <span class="nv">fun</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">apply + </span><span class="nv">values</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">count </span><span class="nv">values</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(factorial 5000) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(fib 20) \t Avg: &quot;</span>         <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(sort-seq) \t Avg: &quot;</span>       <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">sort-seq</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">set!</span> <span class="nv">*main-cli-fn*</span> <span class="nv">-main</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Benchmark results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">&gt; node </span><span class="nv">--version</span>
</span><span class='line'><span class="nv">v0.6.12</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="nv">simple</span> <span class="nv">compiler</span> <span class="nv">optimization</span>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span> <span class="nv">VSZ</span>    <span class="nv">RSS</span>   <span class="nv">TTY</span>    <span class="nv">STAT</span> <span class="nv">START</span>  <span class="nv">TIME</span> <span class="nv">COMMAND</span>
</span><span class='line'><span class="mf">91.4</span> <span class="mf">20.3</span> <span class="mi">90816</span>  <span class="mi">51292</span> <span class="nv">pts/1</span>  <span class="nv">Rl+</span>  <span class="mi">08</span><span class="ss">:46</span>  <span class="mi">0</span><span class="ss">:54</span> <span class="nb">node </span><span class="nv">clojurescript-benchmark-optimization-simple.js</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; node </span><span class="nv">clojurescript-benchmark-optimization-simple.js</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span> <span class="mf">64.345</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span> <span class="mf">5.575</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span> <span class="mf">7281.975</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="nv">advanced</span> <span class="nv">compiler</span> <span class="nv">optimization</span>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span> <span class="nv">VSZ</span>    <span class="nv">RSS</span>   <span class="nv">TTY</span>    <span class="nv">STAT</span> <span class="nv">START</span>  <span class="nv">TIME</span> <span class="nv">COMMAND</span>
</span><span class='line'><span class="mf">99.0</span> <span class="mf">20.9</span> <span class="mi">92200</span>  <span class="mi">52776</span> <span class="nv">pts/0</span>  <span class="nv">Rl+</span>  <span class="mi">07</span><span class="ss">:14</span>  <span class="mi">0</span><span class="ss">:44</span> <span class="nb">node </span><span class="nv">clojurescript-benchmark-optimization-advanced.js</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; node </span><span class="nv">clojurescript-benchmark-optimization-advanced.js</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span> <span class="mf">54.775</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span> <span class="mf">2.77</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span> <span class="mf">6325.71</span>
</span></code></pre></td></tr></table></div></figure>


<p>So as you can see from output above - ClojureScript can be well suitable for development and scripting on small boards like BeagleBone or Raspberry Pi.
Good speed and better semantics at low prices, I ♥ Clojure and ClojureScript :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy HTML5 Validation Fallback for Older Browsers using Modernizr and JQuery Validation Plugin]]></title>
    <link href="http://blog.gonzih.me/blog/2012/12/29/easy-html5-validation-fallback-for-older-browsers-using-modernizr-and-jquery-validation-plugin/"/>
    <updated>2012-12-29T12:15:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2012/12/29/easy-html5-validation-fallback-for-older-browsers-using-modernizr-and-jquery-validation-plugin</id>
    <content type="html"><![CDATA[<p>So I heard that you hate IE. Also I heard that you love HTML5. Is that true? Great, I feel the same about IE. So here is quick fallback script for html5 validation in older browsers (or crappy ones, like IE).
You will need three things for that.</p>

<p>First is <a href="http://modernizr.com/">Modernizr</a> javascript library. It allows you to detect which features are supported by your browser and which aren&#8217;t.</p>

<p>Second is <a href="http://jquery.com/">JQuery</a>. I think you are already familiar with it, so there is no need to tell you why it&#8217;s awesome and how to use it.</p>

<p>Third is <a href="http://docs.jquery.com/Plugins/Validation">JQuery Validation Plugin</a>. It provides mechanism for form validation based on input classes.</p>

<p>So now only things you need to do is to convert html5 validation attributes to html classes and run validation plugin. Here is small <a href="http://coffeescript.org/">CoffeeScript</a> snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># initialize plugin on page ready</span>
</span><span class='line'><span class="nx">$</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="k">unless</span> <span class="p">(</span><span class="nx">Modernizr</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s">&#39;form&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s">&#39;input[required]&#39;</span><span class="p">).</span><span class="nx">each</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;class&#39;</span><span class="p">,</span> <span class="s">&#39;required &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s">&#39;type&#39;</span><span class="p">)).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s">&#39;required&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s">&#39;form&#39;</span><span class="p">).</span><span class="nx">each</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">validate</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># check if form is valid by hand</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&#39;form&#39;</span><span class="p">).</span><span class="nx">valid</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as always, Have a nice day! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note on privacy #1]]></title>
    <link href="http://blog.gonzih.me/blog/2012/12/12/note-on-privacy-number-1/"/>
    <updated>2012-12-12T10:03:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2012/12/12/note-on-privacy-number-1</id>
    <content type="html"><![CDATA[<p>Today I removed from my blog all staff that can track users. I removed Twitter follow and tweet buttons, Google +1 button, Google Analytics script, Facebook related crap.</p>

<p>Why? Because it&#8217;s just unfair. Why would you provide any information about yourself by just being curious? I actually not interested in how many people are reading my blog, anything about traffic sources. Only thing that I am interested in is feedback from users. That is why I left Disqus unchanged. Maybe later I will find something more open and replace Disqus with it. But for now if privacy is issue for you check out <a href="https://chrome.google.com/webstore/detail/ghostery/mlomiejdfkolichcflejclcbmpeaniij">Ghostery exstension for Google Chrome (Chromium)</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmer Dvorak and switching workspaces in XMonad]]></title>
    <link href="http://blog.gonzih.me/blog/2012/10/08/programmer-dvorak-and-switching-workspaces-in-xmonad/"/>
    <updated>2012-10-08T16:31:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2012/10/08/programmer-dvorak-and-switching-workspaces-in-xmonad</id>
    <content type="html"><![CDATA[<p>Recently I migarted from awesome to xmonad. I&#8217;m Programmer Dvorak freak, so I stuck with controlling current workspace from numbers row. First hack was to use functional keys [F1..F12] like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- mod-[F1..F12]       Switch to workspace N</span>
</span><span class='line'><span class="c1">-- mod-shift-[F1..F12] Move client to workspace N</span>
</span><span class='line'><span class="c1">--</span>
</span><span class='line'><span class="p">[((</span><span class="n">m</span> <span class="o">.|.</span> <span class="n">modm</span><span class="p">,</span> <span class="n">k</span><span class="p">),</span> <span class="n">windows</span> <span class="o">$</span> <span class="n">f</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="n">zip</span> <span class="p">(</span><span class="kt">XMonad</span><span class="o">.</span><span class="n">workspaces</span> <span class="n">conf</span><span class="p">)</span> <span class="p">[</span><span class="n">xK_F1</span> <span class="o">..</span> <span class="n">xK_F12</span><span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="p">[(</span><span class="kt">W</span><span class="o">.</span><span class="n">greedyView</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="kt">W</span><span class="o">.</span><span class="n">shift</span><span class="p">,</span> <span class="n">shiftMask</span><span class="p">)]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But after some research I found that I can detect key symbol using xev command. Here is my latest solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Programmer Dvorak</span>
</span><span class='line'><span class="c1">-- mod-[1..9]       Switch to workspace N</span>
</span><span class='line'><span class="c1">-- mod-shift-[1..9] Move client to workspace N</span>
</span><span class='line'><span class="c1">--</span>
</span><span class='line'><span class="p">[((</span><span class="n">m</span> <span class="o">.|.</span> <span class="n">modm</span><span class="p">,</span> <span class="n">k</span><span class="p">),</span> <span class="n">windows</span> <span class="o">$</span> <span class="n">f</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="n">zip</span> <span class="p">(</span><span class="kt">XMonad</span><span class="o">.</span><span class="n">workspaces</span> <span class="n">conf</span><span class="p">)</span> <span class="p">[</span><span class="n">xK_ampersand</span><span class="p">,</span> <span class="n">xK_bracketleft</span><span class="p">,</span> <span class="n">xK_braceleft</span><span class="p">,</span> <span class="n">xK_braceright</span><span class="p">,</span> <span class="n">xK_parenleft</span>
</span><span class='line'>                                             <span class="p">,</span><span class="n">xK_equal</span><span class="p">,</span> <span class="n">xK_asterisk</span><span class="p">,</span> <span class="n">xK_parenright</span><span class="p">,</span> <span class="n">xK_plus</span><span class="p">,</span> <span class="n">xK_bracketright</span><span class="p">,</span> <span class="n">xK_exclam</span><span class="p">]</span>
</span><span class='line'>    <span class="p">,</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="p">[(</span><span class="kt">W</span><span class="o">.</span><span class="n">greedyView</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="kt">W</span><span class="o">.</span><span class="n">shift</span><span class="p">,</span> <span class="n">shiftMask</span><span class="p">)]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hooray! It works!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure on BeagleBone: OpenJDK vs Oracle Embedded JRE benchmark]]></title>
    <link href="http://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/"/>
    <updated>2012-09-07T16:20:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark</id>
    <content type="html"><![CDATA[<p>After installing Embedded JRE on BeagleBone I decided to benchmark it against OpenJDK.</p>

<!-- more -->


<p>BeagleBone is running Ubuntu 12.04.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cat /etc/*-release
</span><span class='line'>DISTRIB_ID=Ubuntu
</span><span class='line'>DISTRIB_RELEASE=12.04
</span><span class='line'>DISTRIB_CODENAME=precise
</span><span class='line'>DISTRIB_DESCRIPTION="Ubuntu 12.04 LTS"</span></code></pre></td></tr></table></div></figure>


<p>BeagleBone CPU is running on 500Mhz.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; cpufreq-info | grep 'current CPU'
</span><span class='line'>current CPU frequency is 500 MHz.</span></code></pre></td></tr></table></div></figure>


<p>Clojure version is 1.4.0.</p>

<p>Benchmark code is from <a href="http://nakkaya.com/2011/03/15/clojure-on-the-beagleboard/">nakkaya&#8217;s post</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">benchmark.core</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factorial</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce * </span><span class="p">(</span><span class="nb">range </span><span class="mi">1</span><span class="nv">N</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">x</span><span class="p">))))</span>
</span><span class='line'><span class="c1">;                   ^ integerOverflow fix</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fib</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sort-seq</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">sort </span><span class="p">(</span><span class="nb">repeat </span><span class="mi">100000</span> <span class="p">(</span><span class="nb">rand-int </span><span class="mi">2000000</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">time-it</span> <span class="p">[</span><span class="nv">fn</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">values</span>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">200</span><span class="p">)]</span> <span class="p">(</span><span class="nb">with-out-str </span><span class="p">(</span><span class="nb">time </span><span class="p">(</span><span class="nf">fn</span><span class="p">))))</span>
</span><span class='line'>        <span class="nv">doubles</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nf">Double.</span> <span class="p">(</span><span class="nb">nth </span><span class="p">(</span><span class="nf">.split</span> <span class="nv">%</span> <span class="s">&quot; &quot;</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span> <span class="nv">values</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">apply + </span><span class="nv">doubles</span><span class="p">)</span> <span class="p">(</span><span class="nb">count </span><span class="nv">doubles</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(factorial 5000) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(fib 20) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="s">&quot;(sort-seq) \t Avg: &quot;</span> <span class="p">(</span><span class="nf">time-it</span> <span class="o">#</span><span class="p">(</span><span class="nf">sort-seq</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here the numbers:</p>

<p>OpenJDK:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">&gt; </span><span class="nv">sudo</span> <span class="nv">apt-get</span> <span class="nv">install</span> <span class="nv">openjdk-7-jre-headless</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">java</span> <span class="nv">-version</span>
</span><span class='line'><span class="nv">java</span> <span class="nv">version</span> <span class="s">&quot;1.7.0_03&quot;</span>
</span><span class='line'><span class="nv">OpenJDK</span> <span class="nv">Runtime</span> <span class="nv">Environment</span> <span class="p">(</span><span class="nf">IcedTea7</span> <span class="mf">2.1</span><span class="nv">.1pre</span><span class="p">)</span> <span class="p">(</span><span class="mi">7</span><span class="o">~</span><span class="nv">u3-2.1.1</span><span class="o">~</span><span class="nv">pre1-1ubuntu3</span><span class="p">)</span>
</span><span class='line'><span class="nv">OpenJDK</span> <span class="nv">Zero</span> <span class="nv">VM</span> <span class="p">(</span><span class="nf">build</span> <span class="mf">22.0</span><span class="nv">-b10</span>, <span class="nv">mixed</span> <span class="nv">mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span> <span class="nv">VSZ</span>    <span class="nv">RSS</span>   <span class="nv">TTY</span>    <span class="nv">STAT</span> <span class="nv">START</span>  <span class="nv">TIME</span> <span class="nv">COMMAND</span>
</span><span class='line'><span class="mf">96.9</span> <span class="mf">16.3</span> <span class="mi">267932</span> <span class="mi">41172</span> <span class="nv">pts/1</span>  <span class="nv">Sl+</span>  <span class="mi">09</span><span class="ss">:07</span>  <span class="mi">9</span><span class="ss">:28</span> <span class="nv">java</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">lein</span> <span class="nv">run</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span>  <span class="mf">1681.9940255249999</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span>  <span class="mf">490.16940197000025</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span>  <span class="mf">7129.159457125003</span>
</span></code></pre></td></tr></table></div></figure>


<p>Embedded JRE:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">&gt; </span><span class="nv">java</span> <span class="nv">-version</span>
</span><span class='line'><span class="nv">java</span> <span class="nv">version</span> <span class="s">&quot;1.7.0_06&quot;</span>
</span><span class='line'><span class="nv">Java</span><span class="p">(</span><span class="nf">TM</span><span class="p">)</span> <span class="nv">SE</span> <span class="nv">Embedded</span> <span class="nv">Runtime</span> <span class="nv">Environment</span> <span class="p">(</span><span class="nf">build</span> <span class="mf">1.7</span><span class="nv">.0_06-b24</span>, <span class="nv">headless</span><span class="p">)</span>
</span><span class='line'><span class="nv">Java</span> <span class="nv">HotSpot</span><span class="p">(</span><span class="nf">TM</span><span class="p">)</span> <span class="nv">Embedded</span> <span class="nv">Client</span> <span class="nv">VM</span> <span class="p">(</span><span class="nf">build</span> <span class="mf">23.2</span><span class="nv">-b09</span>, <span class="nv">mixed</span> <span class="nv">mode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">ps</span> <span class="nv">eu</span>
</span><span class='line'><span class="nv">%CPU</span> <span class="nv">%MEM</span> <span class="nv">VSZ</span>    <span class="nv">RSS</span>   <span class="nv">TTY</span>    <span class="nv">STAT</span> <span class="nv">START</span>  <span class="nv">TIME</span> <span class="nv">COMMAND</span>
</span><span class='line'><span class="mf">91.2</span> <span class="mf">16.4</span> <span class="mi">221740</span> <span class="mi">41372</span> <span class="nv">pts/1</span>  <span class="nv">Sl+</span>  <span class="mi">08</span><span class="ss">:28</span>  <span class="mi">5</span><span class="ss">:16</span> <span class="nv">java</span>
</span><span class='line'>
</span><span class='line'><span class="nb">&gt; </span><span class="nv">lein</span> <span class="nv">run</span>
</span><span class='line'><span class="p">(</span><span class="nf">factorial</span> <span class="mi">5000</span><span class="p">)</span> <span class="nv">Avg</span><span class="err">:</span>  <span class="mf">1061.0568413899998</span>
</span><span class='line'><span class="p">(</span><span class="nf">fib</span> <span class="mi">20</span><span class="p">)</span>         <span class="nv">Avg</span><span class="err">:</span>  <span class="mf">30.877820054999983</span>
</span><span class='line'><span class="p">(</span><span class="nf">sort-seq</span><span class="p">)</span>       <span class="nv">Avg</span><span class="err">:</span>  <span class="mf">1729.9035516600002</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here you are. Better performance and slightly better memory usage.
Good Job, Embedded Java Team :)
Looking forward for hardfloat ABI version to test it on Raspberry Pi.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Oracle Embedded Java on Beaglebone and Ubuntu Issue]]></title>
    <link href="http://blog.gonzih.me/blog/2012/09/03/installing-java-on-beaglebone-and-ubuntu-issue/"/>
    <updated>2012-09-03T20:58:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2012/09/03/installing-java-on-beaglebone-and-ubuntu-issue</id>
    <content type="html"><![CDATA[<p>Recently I was playing with Clojure on Beaglebone and decided to give a try to Oracle&#8217;s new Embedded JRE.
But after downloading JRE from Oracle website (with filling useless stupid forms) I received following error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>java: no such file or directory
</span></code></pre></td></tr></table></div></figure>


<p>So here is fix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install -y libc6-armel libsfgcc1
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://groups.google.com/forum/?fromgroups=#!topic/pandaboard/bb53tEV5GKA">via</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux migrated to GRUB2]]></title>
    <link href="http://blog.gonzih.me/blog/2012/07/20/arch-linux-migrated-to-grub2/"/>
    <updated>2012-07-20T22:13:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2012/07/20/arch-linux-migrated-to-grub2</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/ASSDN.png" alt="My current GRUB2 theme" /></p>

<p>Great news everyone! Today Arch Linux officially switched to GRUB2!</p>

<ul>
<li><a href="http://www.archlinux.org/news/grub-legacy-no-longer-supported/">Post on Arch News</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Grub#Generate_GRUB2_BIOS_Config_file">Migration information is here</a></li>
<li><a href="http://www.reddit.com/r/linux/comments/w7mux/i_make_grub_themes_heres_my_newest_one/">My current GRUB2 theme</a></li>
<li><a href="http://gnome-look.org/usermanager/search.php?username=LegendaryBibo&amp;action=contents">More GRUB2 themes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Broken Comments Count for Disqus]]></title>
    <link href="http://blog.gonzih.me/blog/2012/07/19/fix-broken-comments-count-for-disqus/"/>
    <updated>2012-07-19T18:16:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2012/07/19/fix-broken-comments-count-for-disqus</id>
    <content type="html"><![CDATA[<p>I just figured out that my disqus account was attached to gonzih.github.com but my blog was actually hosted using blog.gonzih.org domain.
That is why comments count was equal to 0 for every post on my index page.
To fix that go to admin ui in disqus and use domain migration tool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Internet Defense League]]></title>
    <link href="http://blog.gonzih.me/blog/2012/07/19/the-internet-defense-league/"/>
    <updated>2012-07-19T14:34:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2012/07/19/the-internet-defense-league</id>
    <content type="html"><![CDATA[<p><img src="http://internetdefenseleague.org/images/launch/cat_sky.jpg" alt="IDL Launch" /></p>

<blockquote><p>The <a href="http://sopastrike.com/">Internet Blackout</a> was just the beginning. Together, our websites and personal networks can mobilize the planet to defend the internet from bad laws &amp; monopolies. Are you in?</p></blockquote>

<p>Join <strong>Internet Defence League</strong> at <a href="http://internetdefenseleague.org/">internetdefenseleague.org</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Magnet Links with RTorrent]]></title>
    <link href="http://blog.gonzih.me/blog/2012/02/17/how-to-use-magnet-links-with-rtorrent/"/>
    <updated>2012-02-17T18:04:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2012/02/17/how-to-use-magnet-links-with-rtorrent</id>
    <content type="html"><![CDATA[<p>Here simple script that will add magnet link as torrent file to your watch directory. You can use it from command line or set it in your browser to handle magnet links.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> ~/watch    <span class="c"># set your watch directory here</span>
</span><span class='line'><span class="o">[[</span> <span class="s2">&quot;$1&quot;</span> <span class="o">=</span>~ <span class="nv">xt</span><span class="o">=</span>urn:btih:<span class="o">([</span>^&amp;/<span class="o">]</span>+<span class="o">)</span> <span class="o">]]</span> <span class="o">||</span> <span class="nb">exit</span>;
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;d10:magnet-uri${#1}:${1}e&quot;</span> &gt; <span class="s2">&quot;meta-${BASH_REMATCH[1]}.torrent&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://libtorrent.rakshasa.no/ticket/2100">via</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nice Vim Keys Map]]></title>
    <link href="http://blog.gonzih.me/blog/2011/10/18/nice-vim-keys-map/"/>
    <updated>2011-10-18T20:05:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2011/10/18/nice-vim-keys-map</id>
    <content type="html"><![CDATA[<p>Large <a href="https://github.com/Gonzih/vim-keymap/raw/master/new/new.png">image</a> (2.4 Megabytes).</p>

<p><a href="https://github.com/Gonzih/vim-keymap/">Source on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set New PostgreSQL Databases Encoding to Unicode]]></title>
    <link href="http://blog.gonzih.me/blog/2011/09/30/set-new-postgresql-databases-encoding-to-unicode/"/>
    <updated>2011-09-30T10:42:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2011/09/30/set-new-postgresql-databases-encoding-to-unicode</id>
    <content type="html"><![CDATA[<p>You must change encoding for template1. For do that run following.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>su - postgres
</span><span class='line'>psql
</span><span class='line'>
</span><span class='line'>UPDATE pg_database SET datistemplate = FALSE WHERE datname = 'template1';
</span><span class='line'>DROP DATABASE template1;
</span><span class='line'>CREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UNICODE';
</span><span class='line'>UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template1';
</span><span class='line'>
</span><span class='line'>#recomended
</span><span class='line'>\c template1
</span><span class='line'>VACUUM FREEZE;</span></code></pre></td></tr></table></div></figure>


<p><a href="http://journal.tianhao.info/2010/12/postgresql-change-default-encoding-of-new-databases-to-utf-8-optional/">via</a></p>
]]></content>
  </entry>
  
</feed>
