<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | Max Gonzih]]></title>
  <link href="http://gonzih.github.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://gonzih.github.com/"/>
  <updated>2013-04-14T02:11:50-07:00</updated>
  <id>http://gonzih.github.com/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure on Raspberry Pi: OpenJDK vs Oracle JRE (Java 8 armhf beta) benchmark]]></title>
    <link href="http://gonzih.github.com/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8/"/>
    <updated>2013-04-14T12:00:00-07:00</updated>
    <id>http://gonzih.github.com/blog/2013/04/14/clojure-on-raspberry-pi-openjdk-vs-oracle-java-8</id>
    <content type="html"><![CDATA[<p><a href="http://jdk8.java.net/fxarmpreview/">Here</a> you can download latest Java 8 preview for armhf. Lets benchmark it on Raspberry Pi!</p>

<!-- more -->


<p>Pi is running Raspbian.
```</p>

<blockquote><p>cat /etc/*-release
PRETTY_NAME="Debian GNU/Linux 7.0 (wheezy)"
NAME="Debian GNU/Linux"
VERSION_ID="7.0"
VERSION="7.0 (wheezy)"
```</p></blockquote>

<p>Pi CPU is running on 700Mhz.
```</p>

<blockquote><p>cpufreq-info | grep 'current CPU'
current CPU frequency is 700 MHz.
```</p></blockquote>

<p>Clojure version is 1.5.1.</p>

<p>Benchmark code is from <a href="http://nakkaya.com/2011/03/15/clojure-on-the-beagleboard/">nakkaya's post</a>, also used for my BeagleBone Clojure/ClojureScript benchmarks:
```clojure
(ns benchmark.core)</p>

<p>(defn factorial [x]
  (reduce * (range 1N (inc x))))
;                   ^ integerOverflow fix</p>

<p>(defn fib [n]
  (if (&lt;= n 1)</p>

<pre><code>1
(+ (fib (- n 1)) (fib (- n 2)))))
</code></pre>

<p>(defn sort-seq []
  (sort (repeat 100000 (rand-int 2000000))))</p>

<p>(defn time-it [fn]
  (let [values  (for [i (range 200)] (with-out-str (time (fn))))</p>

<pre><code>    doubles (map #(Double. (nth (.split % " ") 2)) values)]
(/ (apply + doubles) (count doubles))))
</code></pre>

<p>(defn -main []
  (println "(factorial 5000) \t Avg: " (time-it #(factorial 5000)))
  (println "(fib 20) \t Avg: " (time-it #(fib 20)))
  (println "(sort-seq) \t Avg: " (time-it #(sort-seq))))
```</p>

<p>This time I was a little bit smarter to run all code with lein trampoline run to eliminate overhead.</p>

<p>Numbers:</p>

<p>OpenJDK:
```</p>

<blockquote><p>sudo apt-get install openjdk-7-jre-headless</p>

<p>java -version
java version "1.7.0_07"
OpenJDK Runtime Environment (IcedTea7 2.3.2) (7u7-2.3.2a-1+rpi1)
OpenJDK Zero VM (build 22.0-b10, mixed mode)</p>

<p>ps eu
%CPU %MEM
90.5 15.7</p>

<p>lein trampoline run
(factorial 5000) Avg: 5956.007845080006
(fib 20)         Avg: 713.6807171
(sort-seq)       Avg: 9633.873322030007
```</p></blockquote>

<p>Oracle JRE:
```</p>

<blockquote><p>java -version
java version "1.8.0-ea"
Java(TM) SE Runtime Environment (build 1.8.0-ea-b36e)
Java HotSpot(TM) Client VM (build 25.0-b04, mixed mode)</p>

<p>ps eu
%CPU %MEM
87.9 18.9</p>

<p>lein run
(factorial 5000) Avg: 685.5312071299996
(fib 20)         Avg: 29.505588125000017
(sort-seq)       Avg: 1137.3281607850001
```</p></blockquote>

<p>Looks promising for clojure on small arm devices :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building RC Toy with Clojure]]></title>
    <link href="http://gonzih.github.com/blog/2013/03/19/building-rc-toy-with-clojure/"/>
    <updated>2013-03-19T11:09:00-07:00</updated>
    <id>http://gonzih.github.com/blog/2013/03/19/building-rc-toy-with-clojure</id>
    <content type="html"><![CDATA[<p>Bored and have free time? Lets build something.
Lets build RC Toy. Hm, and lets use Clojure (because clojure is pure fun to use).</p>

<!-- more -->


<p>First of all we need some parts.</p>

<ul>
<li>Tamiya Universal Plate Set (TAM70157) (better to order 2 pcs)</li>
<li>Tamiya Track and Wheel Set (TAM70100)</li>
<li>Tamiya Twin Motor Gearbox  (TAM70097)</li>
<li>Arduino (I have UNO and Leonardo, UNO was choosen since I don't need to make modifications in Firmata code for it (except baudrate))</li>
<li>HBridge IC L293 (L293B was used)</li>
<li>Bluetooth module (you can buy Arduino ready module, I will be using cheapest possible module)</li>
<li>Bluetooth in PC</li>
<li>Wires</li>
<li>Batteries or Accumulator (I have 9v batteries so I will use them)</li>
<li>Gamepad (Logitech Rumble Gemapad F510 was used)</li>
</ul>


<h1>Putting things together</h1>

<h2>Chassis</h2>

<p>First lets build gearbox. You can use it in few different modes of gear ratio. I selected 114.7:1 gear ratio (lucky guess).
Read instructions, take your time. I had 2 9v motors, so since I will be using 9v batteries I decided to replace default motors with 9v ones.</p>

<p>Next assemble tracks. Pretty easy, right? Next is time to put it all together. Since I had only 1 plate I made second one from peace of plexiglass.
I made something like 2 floored chassis. First floor is for motor and wheels (and maybe batteries) and second is for Arduino (and maybe batterries).</p>

<h2>Bluetooth</h2>

<p>We need to do 2 thing with our cheap bluetooth module:</p>

<p>Solder legs to it
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/bluetooth-module-for-Arduino.jpg" alt="Soldered bluetooth module" /></p>

<p>Use voltage divider (bluetooth module is working on 3.3v, Arduino is working on 5v)
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/bluetooth-module-for-Arduino.svg" alt="Voltage devider" /></p>

<h2>Gearbox and HBridge Driver</h2>

<p>To control motors I decided to use HBridge. You can use bunch of transistors if you want, but I'm afraid it would be messy.
To understand how HBridge works you should read <a href="http://learn.adafruit.com/adafruit-Arduino-lesson-15-dc-motor-reversing/overview">Adafruit post</a>.</p>

<p>HBridge -> Arduino Schematics:
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/arduino-and-hbridge-l293b-rc-toy.svg" alt="Schematics" /></p>

<h2>Final version</h2>

<h3>Photos</h3>

<p><img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-001.jpg" alt="rc-toy-001" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-002.jpg" alt="rc-toy-002" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-003.jpg" alt="rc-toy-003" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-004.jpg" alt="rc-toy-004" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-005.jpg" alt="rc-toy-005" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-006.jpg" alt="rc-toy-006" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-007.jpg" alt="rc-toy-007" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-008.jpg" alt="rc-toy-008" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-009.jpg" alt="rc-toy-009" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-010.jpg" alt="rc-toy-010" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-011.jpg" alt="rc-toy-011" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-012.jpg" alt="rc-toy-012" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-014.jpg" alt="rc-toy-014" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-016.jpg" alt="rc-toy-016" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-017.jpg" alt="rc-toy-017" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-018.jpg" alt="rc-toy-018" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-019.jpg" alt="rc-toy-019" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-020.jpg" alt="rc-toy-020" />
<img src="https://dl.dropbox.com/u/4109351/octopress/rc-toy/photos/photo-021.jpg" alt="rc-toy-021" /></p>

<h3>Video</h3>

<p><video width='640' height='480' preload='none' controls poster=' https://dl.dropbox.com/u/4109351/octopress/rc-toy/video-1-cover.jpg'><source src='https://dl.dropbox.com/u/4109351/octopress/rc-toy/video-1.flv' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>

<h1>Writing some code</h1>

<h2>Bluetooth as Serial port</h2>

<p>I used blueman on my Arch Laptop. Gui is straightforward and easy to use.</p>

<h2>Gamepad and kernel</h2>

<p>You need to find kernel module for your gamepad. For my gamepad module <code>joydev</code> was required.
After module is loaded you should see new device in <code>/dev/input</code>.</p>

<h2>Clojure code</h2>

<p>I stuck with <a href="http://clojure.org/">Clojure</a> as main language for controlling Arduino. I took <a href="https://github.com/nakkaya/clodiuno">Clodiuno</a> library.
It is Firmata protocol implementation for Clojure. Why Firmata? Because it's easy, fast and provides great way to extend your project in future.</p>

<p>So I wrote some code, uploaded Firmata to Arduino. And... it's not working.</p>

<p>After some digging in Firmata and Clodiuno code I wrote 2 pull request to Clodiuno.</p>

<p>First issue was that bluetooth uses 9600 baudrate for communications. Fix? <a href="https://github.com/nakkaya/clodiuno/pull/5">pull.</a></p>

<ul>
<li>Update standart Firmata example code in Arduino IDE. Change baudrate to 9600.</li>
<li>Change Clodiuno baudrate to 9600.</li>
</ul>


<p>Second was that Clodiuno waits for version response from Firmata on startup. It's ok for wired UNO since it will be restarted when serial connection is established.
But boards like Leonardo or if you are using bluetooth miss that behavior.</p>

<p>Fix? <a href="https://github.com/nakkaya/clodiuno/pull/6">pull.</a> Manually ask firmware version on Clodiuno initialization.</p>

<p>Most of controller related logic was extracted from awesome library <a href="https://github.com/gavilancomun/jinput-overtone">overtone-jinput</a>.
I just replaced overtone related events handling with my own code based on Clodiuno.</p>

<p>Final version of code is on <a href="https://github.com/Gonzih/clj-arduino-rc-toy">GitHub</a></p>

<p>You can run it with <code>./run.sh</code>.</p>

<h1>Raspberry Pi</h1>

<p>Currently work in progress on moving Clojure code to Rapberry Pi.</p>

<h2>Fixed Issues</h2>

<h3>Native dependencies issue</h3>

<p>Seems like jvm tries to load linux64 native dependencies for Raspberry Pi. Fix:</p>

<p>```sh</p>

<h1>INFO: Failed to load library: no jinput-linux64 in java.library.path</h1>

<p>sudo ln -s /usr/lib/jni/libjinput.so /usr/lib/jni/libjinput-linux64.so`
```</p>

<h3>Gamepad configuration</h3>

<p>Add <code>joydev</code> to <code>/etc/modules</code> to see gamepad in <code>/etc/input</code>.
Also you need to switch gamepad to direct input mode (X -> D switch on the back of gamepad).</p>

<h2>Unfixed Issues</h2>

<h3>Bluetooth as Serial port</h3>

<p>To scan for devices from command line use <code>hcitool scan</code>.</p>

<p>To bind bluetooth to serial port on startup use following code (untested yet):</p>

<p>```text /etc/bluetooth/rfcomm.conf
rfcomm0 {</p>

<pre><code>    bind yes;
    device mac-adress-of-bluetooth-on-arduino;
    channel 1;
    comment "Arduino";
</code></pre>

<p>}
```</p>

<h3>JInput permissions</h3>

<p>For now I have no idea how to fix that issue. Looks like something is wrong with permissions.
<code>
Failed to open device (/dev/input/js0): Failed to open device /dev/input/js0
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClojureScript on BeagleBone: simple benchmark with Node.js]]></title>
    <link href="http://gonzih.github.com/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js/"/>
    <updated>2013-01-23T17:16:00-08:00</updated>
    <id>http://gonzih.github.com/blog/2013/01/23/clojurescript-on-beaglebone-simple-benchmark-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>Benchmark is based on my <a href="/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/">previous experiments</a> with BeagleBone and Clojure. Setup is the same. BeagleBone is running Ubuntu 12.04. Cpu is running on 500 Mhz.
Node version is 0.6.12. ClojureScript is compiled with advanced and simple optimizations.</p>

<!-- more -->


<p><a href="https://github.com/Gonzih/clojurescript-small-benchmark-for-embed">Code</a> is modified to run on top of the JavaScript:
```clojure
(ns benchmark.core)</p>

<p>(defn factorial [x]
  (reduce * (range 1 (inc x))))</p>

<p>(defn fib [n]
  (if (&lt;= n 1)</p>

<pre><code>1
(+ (fib (- n 1)) (fib (- n 2)))))
</code></pre>

<p>(defn sort-seq []
  (sort (repeat 100000 (rand-int 2000000))))</p>

<p>(defn time-fun [fun]
  (let [start  (.getTime (js/Date.))</p>

<pre><code>    _      (fun)
    end    (.getTime (js/Date.))
    result (- end start)]
result))
</code></pre>

<p>(defn time-it [fun]
  (let [values  (for [i (range 200)] (time-fun fun))]</p>

<pre><code>(/ (apply + values)
   (count values))))
</code></pre>

<p>(defn -main []
  (println "(factorial 5000) \t Avg: " (time-it #(factorial 5000)))
  (println "(fib 20) \t Avg: "         (time-it #(fib 20)))
  (println "(sort-seq) \t Avg: "       (time-it #(sort-seq))))</p>

<p>(set! <em>main-cli-fn</em> -main)
```</p>

<p>Benchmark results:</p>

<p>```</p>

<blockquote><p>node --version
v0.6.12</p></blockquote>

<h1>simple compiler optimization</h1>

<blockquote><p>ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
91.4 20.3 90816  51292 pts/1  Rl+  08:46  0:54 node clojurescript-benchmark-optimization-simple.js</p>

<p>node clojurescript-benchmark-optimization-simple.js
(factorial 5000) Avg: 64.345
(fib 20)         Avg: 5.575
(sort-seq)       Avg: 7281.975</p></blockquote>

<h1>advanced compiler optimization</h1>

<blockquote><p>ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
99.0 20.9 92200  52776 pts/0  Rl+  07:14  0:44 node clojurescript-benchmark-optimization-advanced.js</p>

<p>node clojurescript-benchmark-optimization-advanced.js
(factorial 5000) Avg: 54.775
(fib 20)         Avg: 2.77
(sort-seq)       Avg: 6325.71
```</p></blockquote>

<p>So as you can see from output above - ClojureScript can be well suitable for development and scripting on small boards like BeagleBone or Raspberry Pi.
Good speed and better semantics at low prices, I ♥ Clojure and ClojureScript :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure on BeagleBone: OpenJDK vs Oracle Embedded JRE benchmark]]></title>
    <link href="http://gonzih.github.com/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark/"/>
    <updated>2012-09-07T16:20:00-07:00</updated>
    <id>http://gonzih.github.com/blog/2012/09/07/clojure-on-beaglebone-openjdk-vs-oracle-embedded-jre-benchmark</id>
    <content type="html"><![CDATA[<p>After installing Embedded JRE on BeagleBone I decided to benchmark it against OpenJDK.</p>

<!-- more -->


<p>BeagleBone is running Ubuntu 12.04.
```</p>

<blockquote><p>cat /etc/*-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=12.04
DISTRIB_CODENAME=precise
DISTRIB_DESCRIPTION="Ubuntu 12.04 LTS"
```</p></blockquote>

<p>BeagleBone CPU is running on 500Mhz.
```</p>

<blockquote><p>cpufreq-info | grep 'current CPU'
current CPU frequency is 500 MHz.
```</p></blockquote>

<p>Clojure version is 1.4.0.</p>

<p>Benchmark code is from <a href="http://nakkaya.com/2011/03/15/clojure-on-the-beagleboard/">nakkaya's post</a>:
```clojure
(ns benchmark.core)</p>

<p>(defn factorial [x]
  (reduce * (range 1N (inc x))))
;                   ^ integerOverflow fix</p>

<p>(defn fib [n]
  (if (&lt;= n 1)</p>

<pre><code>1
(+ (fib (- n 1)) (fib (- n 2)))))
</code></pre>

<p>(defn sort-seq []
  (sort (repeat 100000 (rand-int 2000000))))</p>

<p>(defn time-it [fn]
  (let [values  (for [i (range 200)] (with-out-str (time (fn))))</p>

<pre><code>    doubles (map #(Double. (nth (.split % " ") 2)) values)]
(/ (apply + doubles) (count doubles))))
</code></pre>

<p>(defn -main []
  (println "(factorial 5000) \t Avg: " (time-it #(factorial 5000)))
  (println "(fib 20) \t Avg: " (time-it #(fib 20)))
  (println "(sort-seq) \t Avg: " (time-it #(sort-seq))))
```</p>

<p>So here the numbers:</p>

<p>OpenJDK:
```</p>

<blockquote><p>sudo apt-get install openjdk-7-jre-headless</p>

<p>java -version
java version "1.7.0_03"
OpenJDK Runtime Environment (IcedTea7 2.1.1pre) (7~u3-2.1.1~pre1-1ubuntu3)
OpenJDK Zero VM (build 22.0-b10, mixed mode)</p>

<p>ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
96.9 16.3 267932 41172 pts/1  Sl+  09:07  9:28 java</p>

<p>lein run
(factorial 5000) Avg:  1681.9940255249999
(fib 20)         Avg:  490.16940197000025
(sort-seq)       Avg:  7129.159457125003
```</p></blockquote>

<p>Embedded JRE:
```</p>

<blockquote><p>java -version
java version "1.7.0_06"
Java(TM) SE Embedded Runtime Environment (build 1.7.0_06-b24, headless)
Java HotSpot(TM) Embedded Client VM (build 23.2-b09, mixed mode)</p>

<p>ps eu
%CPU %MEM VSZ    RSS   TTY    STAT START  TIME COMMAND
91.2 16.4 221740 41372 pts/1  Sl+  08:28  5:16 java</p>

<p>lein run
(factorial 5000) Avg:  1061.0568413899998
(fib 20)         Avg:  30.877820054999983
(sort-seq)       Avg:  1729.9035516600002
```</p></blockquote>

<p>Here you are. Better performance and slightly better memory usage.
Good Job, Embedded Java Team :)
Looking forward for hardfloat ABI version to test it on Raspberry Pi.</p>
]]></content>
  </entry>
  
</feed>
