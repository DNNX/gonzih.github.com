<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: network | Max Gonzih]]></title>
  <link href="http://blog.gonzih.me/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://blog.gonzih.me/"/>
  <updated>2013-08-24T14:51:33+03:00</updated>
  <id>http://blog.gonzih.me/</id>
  <author>
    <name><![CDATA[Max Gonzih ]]></name>
    <email><![CDATA[gonzih@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speed/Ping test graphs with Clojure and Raspberry Pi]]></title>
    <link href="http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi/"/>
    <updated>2013-08-24T14:02:00+03:00</updated>
    <id>http://blog.gonzih.me/blog/2013/08/24/speed-slash-ping-test-graphs-with-clojure-and-raspberry-pi</id>
    <content type="html"><![CDATA[<p>I'm often complaining about my ISP quality.
Sometimes pings are high, sometimes download speed goes down.
So I decided to make sure it's my ISP fault and not just my opinion based on my hate to them.</p>

<p>How to do so? Lets collect data about download speed and pings over time, and show some graphs based on that data.</p>

<!-- more -->


<p>I have unused Raspberry Pi right now, so it will be used to collect data.</p>

<h2>Speedtest data</h2>

<p>For speedtest I will be using python script that uses speedtest.net servers.
Pi is running Pidora right now, so lets install script dependencies.</p>

<p><code>sh
yum -y install python-argparse python-lxml
</code></p>

<p>Script is hosted on <a href="https://github.com/Janhouse/tespeed">github</a>.
Lets get script.</p>

<p><code>sh
mkdir ~/scripts
wget https://raw.github.com/Janhouse/tespeed/master/tespeed.py -O ~/scripts/speedtest.py
</code></p>

<p>You can test script running it with:</p>

<p><code>sh
python ~/scripts/speedtest.py
</code></p>

<p>Now lets wrap python script into additional shell script to store time of data collection in csv.
I'm not sure if I need time for now, but lets keep it anyway.
We will silence stderr from the script and output result as csv.</p>

<p>```sh ~/bin/speedtest.zsh</p>

<h1>!/usr/bin/zsh</h1>

<p>echo "\"$(date -R)\",$(python ~/scripts/tespeed.py --csv -s)"
```</p>

<p>Lets put script into crontab to run every 5 minutes, also lets redirect stderr to /dev/null in case of Ethernet unavailability or some other issues.</p>

<p><code>sh crontab
*/5 * * * * ~/bin/speedtest.zsh 2&gt;/dev/null &gt;&gt; ~/.speedtest.csv
</code></p>

<h2>Ping data</h2>

<p>For ping data we will be running <code>ping</code> command with 100 packets (<code>ping -c 100</code>) with google dns as target (8.8.8.8) and storing avg value with time to csv file.</p>

<p>```sh ~/bin/pingtest.zsh</p>

<h1>!/usr/bin/zsh</h1>

<p>AVG=$(ping -c 100 8.8.8.8 | grep rtt | sed -r 's#.*\=\s.+/(.+)/.+/.+#\1#')</p>

<p>echo "\"$(date -R)\",$AVG"
```</p>

<p><code>sh crontab
*/5 * * * * ~/bin/pingtest.zsh 2&gt;/dev/null &gt;&gt; ~/.pingtest.csv
</code></p>

<h2>Graphs</h2>

<p>For data visualization let's use Clojure with Incanter. Here is clojure code:</p>

<p>```clojure
(ns incanter-temp-graphs.core
  (:require [incanter.core :refer :all]</p>

<pre><code>        [incanter.stats :refer :all]
        [incanter.charts :refer :all]
        [clojure-csv.core :refer :all])
</code></pre>

<p>  (:gen-class))</p>

<p>(defn to-f [is] (Float/parseFloat is))</p>

<p>(defn get-f-col [data col]
  (map to-f (sel data :cols col)))</p>

<p>(defn init-chart [data rng {:keys [x-label y-label]}]
  (line-chart rng data :x-label x-label</p>

<pre><code>                   :y-label y-label))
</code></pre>

<p>(defn add-to-chart [chart data rng]
  (if-not (empty? data)</p>

<pre><code>(recur (add-categories chart rng (first data))
       (rest data)
       rng)
chart))
</code></pre>

<p>(defn draw-file [filename cols &amp; {:as opts}]
  (let [data (slurp filename)</p>

<pre><code>    csv (parse-csv data :delimiter \,)
    rng (range 0 (count csv))
    data (map (partial get-f-col csv) cols)
    chart (init-chart (first data) rng opts)
    chart-to-show (add-to-chart chart (rest data) rng)]
(view chart-to-show)))
</code></pre>

<p>(defn -main [speedfile pingfile &amp; args]
  (draw-file speedfile [1 2] :x-label "Time" :y-label "Speed")
  (draw-file pingfile [1] :x-label "Time" :y-label "Ping time"))
```</p>

<p>Lets put all launch process to Makefile:</p>

<p>```makefile Makefile
default:</p>

<pre><code>scp raspberry-pi.local:.speedtest.csv /tmp/
scp raspberry-pi.local:.pingtest.csv /tmp/
#Remove lines with only time (script failure)
grep "[^,]$$" /tmp/.speedtest.csv &gt; /tmp/.speedtest-fixed.csv
grep "[^,]$$" /tmp/.pingtest.csv &gt; /tmp/.pingtest-fixed.csv
lein run /tmp/.speedtest-fixed.csv /tmp/.pingtest-fixed.csv
</code></pre>

<p>```</p>

<p>I adjusted my router, so QoS daemon will give maximum priority to traffic from my Raspberry Pi, so data will be cleaner.
And now we can see some visualization.</p>
]]></content>
  </entry>
  
</feed>
